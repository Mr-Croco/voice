
let items = [];
let currentIndex = 0;

document.getElementById('file-input').addEventListener('change', handleFile, false);

function handleFile(e) {
  const file = e.target.files[0];
  const reader = new FileReader();

  reader.onload = function (e) {
    const data = new Uint8Array(e.target.result);
    const workbook = XLSX.read(data, { type: 'array' });
    const sheet = workbook.Sheets[workbook.SheetNames[0]];
    const json = XLSX.utils.sheet_to_json(sheet, { header: 1 });

    items = [];
    for (let i = 8; i < json.length; i++) {
      const row = json[i];
      if (!row) continue;

      const rawArticle = row[5];
      const u = parseInt(row[20]) || 0;
      const v = parseInt(row[21]) || 0;
      const w = parseInt(row[22]) || 0;
      const qty = Math.max(u, v, w);

      if (typeof rawArticle === 'string' && /(KR|KU|–ö–†|–ö–£|KLT|–†–¢|PT)[-.\s]?\d+/i.test(rawArticle)) {
        const match = rawArticle.match(/(KR|KU|–ö–†|–ö–£|KLT|–†–¢|PT)[-.\s]?(\d+)[-.]?(\d+)?/i);
        if (match) {
          items.push({
            article: match[0],
            prefix: match[1],
            main: match[2],
            extra: match[3] || null,
            qty,
            row, // ‚Üê —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç—Ä–æ–∫—É –¥–ª—è –æ–∑–≤—É—á–∫–∏ –ø–æ–ª–Ω–æ—Å—Ç—å—é
            checked: false
          });
        }
      }
    }

    renderTable();
  };

  reader.readAsArrayBuffer(file);
}

function renderTable() {
  const tbody = document.querySelector("#items-table tbody");
  tbody.innerHTML = "";

  items.forEach((item, idx) => {
    const row = document.createElement("tr");
    if (idx === currentIndex) row.classList.add("active-row");

    const td1 = document.createElement("td");
    td1.textContent = item.article;

    const td2 = document.createElement("td");
    td2.textContent = item.qty;

    const td3 = document.createElement("td");
    const checkbox = document.createElement("input");
    checkbox.type = "checkbox";
    checkbox.checked = item.checked;
    checkbox.addEventListener("change", (e) => {
      items[idx].checked = e.target.checked;
      renderTable();
    });
    td3.appendChild(checkbox);

    row.appendChild(td1);
    row.appendChild(td2);
    row.appendChild(td3);
    row.addEventListener("click", (e) => {
      if (e.target.tagName.toLowerCase() === "input") return;
      currentIndex = idx;
      speakCurrent();
    });

    tbody.appendChild(row);
  });

  document.getElementById("count").textContent = `–ó–∞–≥—Ä—É–∂–µ–Ω–æ –ø–æ–∑–∏—Ü–∏–π: ${items.length}`;
}

const synth = window.speechSynthesis;
const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;
let recognition;
let isListening = false;

function startReading() {
  if (!items.length) return;
  currentIndex = 0;
  speakCurrent();
  startListening();
}

function speakCurrent() {
  if (!items[currentIndex]) return;

  const { prefix, main, extra, qty } = items[currentIndex];
  let articleText;

if (["KR", "–ö–†", "KU", "–ö–£", "KLT"].includes(prefix.toUpperCase())) {
  articleText = formatArticle(prefix, main, extra);
} else {
  // –ü—Ä–æ—á–∏—Ç–∞—Ç—å –≤—Å—é —Å—Ç—Ä–æ–∫—É, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ KR, KU –∏–ª–∏ KLT
  articleText = items[currentIndex].row
  .filter(cell => cell && typeof cell === 'string')
  .join(' ')
  .replace(/\s+/g, ' ')
  .trim();
   }
  
  const qtyText = numberToWordsRu(qty);
  const qtyEnding = getQtySuffix(qty);
  const phrase = `${articleText} –ø–æ–ª–æ–∂–∏—Ç—å ${qtyText} ${qtyEnding}`;
  speak(phrase);
  renderTable();
}

function speak(text) {
  const utterance = new SpeechSynthesisUtterance(text);
  utterance.lang = 'ru-RU';
  synth.cancel();
  synth.speak(utterance);
}

function numberToWordsRuNom(num) {
  num = parseInt(num);
  const ones = ["–Ω–æ–ª—å", "–æ–¥–∏–Ω", "–¥–≤–∞", "—Ç—Ä–∏", "—á–µ—Ç—ã—Ä–µ", "–ø—è—Ç—å", "—à–µ—Å—Ç—å", "—Å–µ–º—å", "–≤–æ—Å–µ–º—å", "–¥–µ–≤—è—Ç—å"];
  const teens = ["–¥–µ—Å—è—Ç—å", "–æ–¥–∏–Ω–Ω–∞–¥—Ü–∞—Ç—å", "–¥–≤–µ–Ω–∞–¥—Ü–∞—Ç—å", "—Ç—Ä–∏–Ω–∞–¥—Ü–∞—Ç—å", "—á–µ—Ç—ã—Ä–Ω–∞–¥—Ü–∞—Ç—å", "–ø—è—Ç–Ω–∞–¥—Ü–∞—Ç—å", "—à–µ—Å—Ç–Ω–∞–¥—Ü–∞—Ç—å", "—Å–µ–º–Ω–∞–¥—Ü–∞—Ç—å", "–≤–æ—Å–µ–º–Ω–∞–¥—Ü–∞—Ç—å", "–¥–µ–≤—è—Ç–Ω–∞–¥—Ü–∞—Ç—å"];
  const tens = ["", "", "–¥–≤–∞–¥—Ü–∞—Ç—å", "—Ç—Ä–∏–¥—Ü–∞—Ç—å", "—Å–û—Ä–æ–∫", "–ø—è—Ç—å–¥–µ—Å—è—Ç", "—à–µ—Å—Ç—å–¥–µ—Å—è—Ç", "—Å–µ–º—å–¥–µ—Å—è—Ç", "–≤–æ—Å–µ–º—å–¥–µ—Å—è—Ç", "–¥–µ–≤—è–Ω–æ—Å—Ç–æ"];
  const hundreds = ["", "—Å—Ç–æ", "–¥–≤–µ—Å—Ç–∏", "—Ç—Ä–∏—Å—Ç–∞", "—á–µ—Ç—ã—Ä–µ—Å—Ç–∞", "–ø—è—Ç—å—Å–æ—Ç", "—à–µ—Å—Ç—å—Å–æ—Ç", "—Å–µ–º—å—Å–æ—Ç", "–≤–æ—Å–µ–º—å—Å–æ—Ç", "–¥–µ–≤—è—Ç—å—Å–æ—Ç"];

  if (num < 10) return ones[num];
  if (num < 20) return teens[num - 10];
  if (num < 100) {
    const t = Math.floor(num / 10);
    const o = num % 10;
    return tens[t] + (o ? " " + ones[o] : "");
  }
  if (num < 1000) {
    const h = Math.floor(num / 100);
    const rem = num % 100;
    return hundreds[h] + (rem ? " " + numberToWordsRuNom(rem) : "");
  }

  return num.toString();
}

function extractArticle(row) {
  const pattern = /(KR|KU|–ö–†|–ö–£|KLT|–†–¢|PT)[-‚Äì]?(\d+)(?:[-‚Äì.]?(\d+))?/i;

  for (let cell of row) {
    const match = typeof cell === 'string' && cell.match(pattern);
    if (match) {
      const prefix = match[1].toUpperCase();

      // üéØ –û—Å–æ–±—ã–π —Å–ª—É—á–∞–π: –µ—Å–ª–∏ –ø—Ä–µ—Ñ–∏–∫—Å PT ‚Üí –æ–∑–≤—É—á–∏–≤–∞–µ–º –≤—Å—é —Å—Ç—Ä–æ–∫—É
      if (prefix === "PT") {
        return row.filter(Boolean).join(", ");
      }

      // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –æ–∑–≤—É—á–∫–∞ –ø–æ –ø—Ä–µ—Ñ–∏–∫—Å–∞–º
      return formatArticle(match[1], match[2], match[3]);
    }
  }

  return null;
}


function formatArticle(prefix, main, extra) {
  const upperPrefix = prefix.toUpperCase();
  const isKR = upperPrefix.includes("KR") || upperPrefix.includes("–ö–†");
  const isKU = upperPrefix.includes("KU") || upperPrefix.includes("–ö–£");

  if (isKR) {
    const ruPrefix = "–ö–∞–≠—Ä";
    return `${ruPrefix} ${numberToWordsRuNom(main)}${extra ? ' –¥—Ä–æ–±—å ' + numberToWordsRuNom(extra) : ''}`;
  }

  if (isKU) {
    const ruPrefix = "–ö—É–¥–æ";
    const raw = main.toString();
    let parts = [];

    if (raw.length === 4) {
      parts = [raw.slice(0, 2), raw.slice(2)];
    } else if (raw.length === 5) {
      parts = [raw.slice(0, 2), raw.slice(2)];
    } else if (raw.length === 6) {
      parts = [raw.slice(0, 2), raw.slice(2, 4), raw.slice(4)];
    } else {
      parts = [raw];
    }

    const spoken = parts.map(p => {
      if (p.length === 2 && p.startsWith("0")) {
        return "–Ω–æ–ª—å " + numberToWordsRuNom(p[1]);
      } else {
        return numberToWordsRuNom(parseInt(p));
      }
    }).join(" ");

    const isKLT = upperPrefix === "KLT";

    if (isKLT) {
  return `–ö—ç–≠–ª–¢—ç ${numberToWordsRuNom(main)}${extra ? ' –¥—Ä–æ–±—å ' + numberToWordsRuNom(extra) : ''}`;
}
    
    return `${ruPrefix} ${spoken}${extra ? ' ' + extra : ''}`;
  }

  return null;
}

function numberToWordsRu(num) {
  num = parseInt(num);
  const ones = ["–Ω–æ–ª—å", "–æ–¥–Ω—É", "–¥–≤–µ", "—Ç—Ä–∏", "—á–µ—Ç—ã—Ä–µ", "–ø—è—Ç—å", "—à–µ—Å—Ç—å", "—Å–µ–º—å", "–≤–æ—Å–µ–º—å", "–¥–µ–≤—è—Ç—å"];
  const teens = ["–¥–µ—Å—è—Ç—å", "–æ–¥–∏–Ω–Ω–∞–¥—Ü–∞—Ç—å", "–¥–≤–µ–Ω–∞–¥—Ü–∞—Ç—å", "—Ç—Ä–∏–Ω–∞–¥—Ü–∞—Ç—å", "—á–µ—Ç—ã—Ä–Ω–∞–¥—Ü–∞—Ç—å", "–ø—è—Ç–Ω–∞–¥—Ü–∞—Ç—å", "—à–µ—Å—Ç–Ω–∞–¥—Ü–∞—Ç—å", "—Å–µ–º–Ω–∞–¥—Ü–∞—Ç—å", "–≤–æ—Å–µ–º–Ω–∞–¥—Ü–∞—Ç—å", "–¥–µ–≤—è—Ç–Ω–∞–¥—Ü–∞—Ç—å"];
  const tens = ["", "", "–¥–≤–∞–¥—Ü–∞—Ç—å", "—Ç—Ä–∏–¥—Ü–∞—Ç—å", "—Å–û—Ä–æ–∫", "–ø—è—Ç—å–¥–µ—Å—è—Ç", "—à–µ—Å—Ç—å–¥–µ—Å—è—Ç", "—Å–µ–º—å–¥–µ—Å—è—Ç", "–≤–æ—Å–µ–º—å–¥–µ—Å—è—Ç", "–¥–µ–≤—è–Ω–æ—Å—Ç–æ"];
  const hundreds = ["", "—Å—Ç–æ", "–¥–≤–µ—Å—Ç–∏", "—Ç—Ä–∏—Å—Ç–∞", "—á–µ—Ç—ã—Ä–µ—Å—Ç–∞", "–ø—è—Ç—å—Å–æ—Ç", "—à–µ—Å—Ç—å—Å–æ—Ç", "—Å–µ–º—å—Å–æ—Ç", "–≤–æ—Å–µ–º—å—Å–æ—Ç", "–¥–µ–≤—è—Ç—å—Å–æ—Ç"];

  if (num < 10) return ones[num];
  if (num < 20) return teens[num - 10];
  if (num < 100) {
    const t = Math.floor(num / 10);
    const o = num % 10;
    return tens[t] + (o ? " " + ones[o] : "");
  }
  if (num < 1000) {
    const h = Math.floor(num / 100);
    const rem = num % 100;
    return hundreds[h] + (rem ? " " + numberToWordsRuNom(rem) : "");
  }

  return num.toString();
}

function getQtySuffix(num) {
  const rem10 = num % 10;
  const rem100 = num % 100;
  if (rem10 === 1 && rem100 !== 11) return "—à—Ç—É–∫—É";
  if ([2, 3, 4].includes(rem10) && ![12, 13, 14].includes(rem100)) return "—à—Ç—É–∫–∏";
  return "—à—Ç—É–∫";
}

function startListening() {
  if (isListening) return;

  const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;
  recognition = new SpeechRecognition();
  recognition.lang = 'ru-RU';
  recognition.continuous = true;
  recognition.interimResults = false;

  recognition.onresult = function (event) {
    const transcript = event.results[event.results.length - 1][0].transcript.trim().toLowerCase();
    console.log("–†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ:", transcript);
    handleVoiceCommand(transcript);
  };

  recognition.onerror = function (event) {
    console.error("–û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è:", event.error);
    if (event.error === "not-allowed" || event.error === "service-not-allowed") {
      isListening = false;
    }
  };

  recognition.onend = function () {
    console.log("–ü—Ä–æ—Å–ª—É—à–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞");
    if (isListening) {
      setTimeout(() => recognition.start(), 300); // –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫
    }
  };

  isListening = true;
  recognition.start();
  console.log("–ü—Ä–æ—Å–ª—É—à–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞");
}

function speakNextUnprocessed() {
  let next = currentIndex + 1;
  while (next < items.length && items[next].checked) {
    next++;
  }
  if (next < items.length) {
    currentIndex = next;
    speakCurrent();
  } else {
    speak("–ë–æ–ª—å—à–µ –Ω–µ–æ—Ç–º–µ—á–µ–Ω–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π –Ω–µ—Ç.");
  }
}

function handleVoiceCommand(cmd) {
  console.log("–†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ:", cmd);
  if (["–≥–æ—Ç–æ–≤–æ", "–ø–æ–ª–æ–∂–∏–ª", "–æ–∫"].includes(cmd)) {
    items[currentIndex].checked = true;
    speakNextUnprocessed();
  } else if (["–¥–∞–ª—å—à–µ", "–ø—Ä–æ–ø—É—Å–∫–∞–µ–º", "–Ω–µ–∫—Å—Ç"].includes(cmd)) {
    speakNextUnprocessed();
  } else if (cmd === "–Ω–∞–∑–∞–¥") {
    currentIndex = Math.max(0, currentIndex - 1);
    speakCurrent();
  } else if (["–ø–æ–≤—Ç–æ—Ä–∏", "–µ—â—ë —Ä–∞–∑", "–ø–æ–≤—Ç–æ—Ä–∏—Ç—å"].includes(cmd)) {
    speakCurrent();
  } else if (cmd.includes("–Ω–∞—á–Ω–∏") && cmd.includes("–ø—Ä–æ–ø—É—â")) {
    startFromSkipped();
  }

  renderTable();
}

function startFromSkipped() {
  let next = items.findIndex(item => !item.checked);
  if (next !== -1) {
    currentIndex = next;
    speakCurrent();
  } else {
    speak("–í—Å–µ –ø–æ–∑–∏—Ü–∏–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã.");
  }
}
